---
import type { ImageMetadata } from 'astro';

interface Props {
  src: ImageMetadata | string;
  alt: string;
  caption?: string;
}

const { src, alt, caption } = Astro.props;

const svgUrl = typeof src === 'string' ? src : src.src;
---

<figure class="w-full max-w-full overflow-hidden my-8">
  <div class="custom-svg w-full max-w-full overflow-hidden" data-svg-url={svgUrl} aria-label={alt}>
    <img src={svgUrl} alt={alt} style="display: none;" />
  </div>
  {caption && <figcaption class="text-center mt-4 text-sm text-skin-base italic">{caption}</figcaption>}
</figure>

<script is:inline>
  function modifySvg(svgString) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(svgString, 'image/svg+xml');
    const svg = doc.documentElement;

    svg.setAttribute('width', '100%');
    svg.setAttribute('height', '100%');
    svg.classList.add('w-full', 'h-auto');

    doc.querySelectorAll('text').forEach((text) => {
      text.removeAttribute('fill');
      text.classList.add('fill-skin-base');
    });

    doc.querySelectorAll('rect').forEach((rect) => {
      rect.removeAttribute('fill');
      rect.classList.add('fill-skin-soft');
    });

    doc.querySelectorAll('path').forEach((path) => {
      path.removeAttribute('stroke');
      path.classList.add('stroke-skin-accent');
    });

    doc.querySelectorAll('g').forEach((g) => {
      g.classList.add('custom-element');
    });

    return new XMLSerializer().serializeToString(doc);
  }

  function onThemeChange(callback) {
    const html = document.documentElement;
    const observer = new MutationObserver(() => {
      callback();
    });
    observer.observe(html, { attributes: true, attributeFilter: ['class'] });
  }

  function initCustomSVG() {
    const svgContainers = document.querySelectorAll('.custom-svg');

    const loadAndInject = async (container) => {
      const svgUrl = container.dataset.svgUrl;
      if (svgUrl) {
        try {
          const response = await fetch(svgUrl);
          if (!response.ok) throw new Error(`Failed to fetch SVG: ${response.statusText}`);
          const svgData = await response.text();
          const modifiedSvg = modifySvg(svgData);
          container.innerHTML = modifiedSvg;
        } catch (error) {
          console.error('Error in CustomSVG component:', error);
          container.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
            <text x="10" y="50" fill="red">Error loading SVG</text>
          </svg>`;
        }
      }
    };

    svgContainers.forEach(container => loadAndInject(container));

    // Re-inject SVGs when theme changes
    onThemeChange(() => {
      svgContainers.forEach(container => loadAndInject(container));
    });
  }

  document.addEventListener('DOMContentLoaded', initCustomSVG);
  document.addEventListener('astro:page-load', initCustomSVG);
</script>

<style>
  :global(.custom-svg svg) {
    width: 100%;
    height: auto;
  }

  :global(.custom-svg .fill-skin-base) {
    @apply fill-[rgb(40, 39, 40)] dark:fill-[rgb(175, 176, 177)];
  }
  :global(.custom-svg .fill-skin-soft) {
    @apply fill-[rgb(40, 39, 40)] dark:fill-[rgb(175, 176, 177)];
  }
  :global(.custom-svg .stroke-skin-accent) {
    @apply stroke-[rgb(26, 26, 26)] dark:stroke-[rgb(245, 245, 245)];
  }
  :global(.custom-svg .custom-element) {
      transition: all 0.3s ease-in-out;
  }
  :global(.custom-svg .custom-element:hover) {
      opacity: 0.8;
  }

</style>
